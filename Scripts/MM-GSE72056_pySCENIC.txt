# task: run pySCENIC on tumor biopsy data from Tirosh et al. 2016 (GSE72056)
 
# [1] run pyscenic (bash) {
staging=/ddn1/vol1/staging/leuven/stg_00002/lcb/
cd ${staging}kspan/analyses/PublicData/Tirosh2016/
loom_file=MM-GSE72056.loom
grnboost_file=GSE72056.net.tsv

#re-use GRNboost2 link weight file from Bram Van De Sande
cat ${staging}bvds/resources/GSE72056.net.csv | tr ',' '\t' >${grnboost_file}

#note: count matrix in loom file is normalized and log-transformed
#same as counts matrix online: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE72056

## run on gene-based databases 
##############################
feather_dir=/ddn1/vol1/staging/leuven/res_00001/databases/cistarget/databases/homo_sapiens/hg19/refseq_r45/mc9nr/gene_based
dbs=$(ls ${feather_dir}/hg19*.feather | tr '\n' ' ')
annot_dir=/ddn1/vol1/staging/leuven/res_00001/databases/cistarget/motif2tf
annot_file=motifs-v9-nr.hgnc-m0.001-o0.0.tbl

#ctx step
singularity exec --bind ${feather_dir}:${feather_dir}:ro,${annot_dir}:/annot_dir:ro ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic ctx ${grnboost_file} ${dbs} --annotations_fname /annot_dir/${annot_file} --expression_mtx_fname ${loom_file} --output reg_mtf.csv --num_workers 20 --all_modules

#aucell step 
singularity exec ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic aucell ${loom_file} reg_mtf.csv --output pyscenic_output_mtf.loom --num_workers 20
	
## run on track databases
#########################
feather_dir=/staging/leuven/res_00001/databases/cistarget/databases/homo_sapiens/hg19/refseq_r45/tc_v1/gene_based 
dbs=$(ls ${feather_dir}/*ChIP_seq_transcription_factor.hg19-*.feather | tr '\n' ' ')  
annot_dir=${staging}kspan/scRNA_seq_melanoma/analysis_40k/MM40k100xSCENIC/MM40k100xSCENIC_woDoublets
annot_file=encode_20160128__inhouse_20200116__taipale_20130924__encode_project_20190621__ChIP-seq_transcription_factor.homo_sapiens.hg19.track_to_tf_in_motif_to_tf_format.tsv 
 
#ctx step
singularity exec --bind ${feather_dir}:${feather_dir}:ro,${annot_dir}:/annot_dir:ro ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic ctx ${grnboost_file} ${dbs} --annotations_fname /annot_dir/${annot_file} --expression_mtx_fname ${loom_file} --output reg_trk_new_db.csv --num_workers 20 --all_modules

#aucell step 
singularity exec ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic aucell ${loom_file} reg_trk_new_db.csv --output pyscenic_output_trk_new_db.loom --num_workers 20
#}

# [2] get extended/non-extended regulons (R) {
#module load R/3.6.1-foss-2018a-X11-20180604
#module load GCC/6.4.0-2.28
#module load OpenBLAS/0.2.20-GCC-6.4.0-2.28
#PATH=$PATH:$VSC_HOME/progs/hdf5-1.10.4/bin/bin/
#LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VSC_HOME/progs/hdf5-1.10.4/bin/lib/
#R
options(stringsAsFactors=FALSE)
.libPaths("/ddn1/vol1/staging/leuven/stg_00002/lcb/kspan/R/x86_64-pc-linux-gnu-library/3.6")
staging <- "/ddn1/vol1/staging/leuven/stg_00002/lcb"
#############################################################################################
library(reshape2)
library(data.table)
library(hdf5r)

wd <- file.path(staging, "kspan/analyses/PublicData/Tirosh2016")
setwd(wd)

## functions {
# function to get all target genes for a specific TF from reg table
getRegulon <- function(reg, tf) {
   digitpattern <- "[[:digit:]]+\\.[[:digit:]e-]+"
   alltargets <- lapply(1:reg[TF == tf, .N], function(i) {
	targets <- strsplit(
	 gsub(digitpattern, "",
	  gsub(" ", "",
   	   gsub("'", "", 
     	    gsub("]", "",
     	     gsub("[", "", 
       	      gsub("[()]", "", reg[TF == tf, TargetGenes][i]), 
     	     fixed = TRUE), 
     	    fixed = TRUE),
   	   )
          )
         )
	, ",")[[1]]
   targets[sapply(targets, function(p) {p != ""})]
   })
   Reduce(union, alltargets)
}
#}

# get extended regulons {
## track regulons
#################
reg <- fread("reg_trk_new_db.csv", , skip = 3, sep = ",")
colnames(reg) <- c("TF", "MotifID", "AUC", "Annotation", "Context", "MotifSimilarityQvalue",
	"NES", "OrthologousIdentity", "RankAtMax", "TargetGenes")
		
# split into positive and negative regulons
pos <- reg[grep("activating", reg$Context),]
neg <- reg[grep("repressing", reg$Context),]
	
# combine targets to regulons
regulons <- list()
regulons[["pos"]] <- sapply(unique(pos[, TF]), function(tf) {
	getRegulon(pos, tf)
})
#133
regulons[["neg"]] <- sapply(unique(neg[, TF]), function(tf) {
	getRegulon(neg, tf)
})
#50
saveRDS(regulons, file = "regulons_extended_trk_new_db.rds.gz", compress = "gzip")

## motif regulons
#################
reg <- fread("reg_mtf.csv", , skip = 3, sep = ",")
colnames(reg) <- c("TF", "MotifID", "AUC", "Annotation", "Context", "MotifSimilarityQvalue",
	"NES", "OrthologousIdentity", "RankAtMax", "TargetGenes")
		
# split into positive and negative regulons
pos <- reg[grep("activating", reg$Context),]
neg <- reg[grep("repressing", reg$Context),]
	
# combine targets to regulons
regulons <- list()
regulons[["pos"]] <- sapply(unique(pos[, TF]), function(tf) {
	getRegulon(pos, tf)
})
#827
regulons[["neg"]] <- sapply(unique(neg[, TF]), function(tf) {
	getRegulon(neg, tf)
})
#395	
saveRDS(regulons, file = "regulons_extended_mtf.rds.gz", compress = "gzip")

## combine both
###############
regulons <- list()
mtfregs <- readRDS("regulons_extended_mtf.rds.gz")
trkregs <- readRDS("regulons_extended_trk_new_db.rds.gz")
for (dir in c("pos", "neg")) { 
	regulons[[paste("trk", dir, sep = "_")]] <- trkregs[[dir]]
	regulons[[paste("mtf", dir, sep = "_")]] <- mtfregs[[dir]]
}
#remove empty lists
regulons <- regulons[!lapply(regulons, length)==0] 

# make one data frame with presence/absence
reg_long <- lapply(regulons, function(regset) {
	stack(regset, drop = TRUE)
	})
reg_long <- rbindlist(reg_long, idcol = names(reg_long))
colnames(reg_long) <- c("psrun", "target", "tf")
reg_long[, regulon := paste0(psrun, "_", tf)]
reg_long[, dir := vapply(strsplit(reg_long[, psrun], "_"), '[', 2, FUN.VALUE=character(1))]
reg_long[, db := vapply(strsplit(reg_long[, psrun], "_"), '[', 1, FUN.VALUE=character(1))]
saveRDS(reg_long[, .(tf, target, dir, db)], file = "all_extended_regulons_new.rds.gz", compress = "gzip")
	#1eaecf12483e9a20c5a89b5150a390974f309f70  all_extended_regulons_new.rds.gz
#}

sessionInfo() #{
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /vsc-hard-mounts/leuven-apps/skylake/2018a/software/OpenBLAS/0.2.20-GCC-6.4.0-2.28/lib/libopenblas_haswellp-r0.2.20.so

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] hdf5r_1.2.0       data.table_1.12.8 reshape2_1.4.3   

loaded via a namespace (and not attached):
 [1] bit_1.1-15.2   compiler_3.6.1 R6_2.4.1       magrittr_1.5   plyr_1.8.4    
 [6] tools_3.6.1    Rcpp_1.0.3     bit64_0.9-7    stringi_1.4.3  stringr_1.4.0 
#}
#}
