# task: run pyscenic on dropseq data & make loom file

#module load R/3.6.1-foss-2018a-X11-20180604
#module load GCC/6.4.0-2.28
#module load OpenBLAS/0.2.20-GCC-6.4.0-2.28
#PATH=$PATH:$VSC_HOME/progs/hdf5-1.10.4/bin/bin/
#LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$VSC_HOME/progs/hdf5-1.10.4/bin/lib/
#R
options(stringsAsFactors=FALSE)
.libPaths("/ddn1/vol1/staging/leuven/stg_00002/lcb/kspan/R/x86_64-pc-linux-gnu-library/3.6")
staging <- "/ddn1/vol1/staging/leuven/stg_00002/lcb"
#############################################################################################
library(data.table)
library(hdf5r)
library(rjson)
library(SCopeLoomR)
library(AUCell)
seed <- 42

zdir <- file.path(staging, "zkalender/scRNA_seq_melanoma/analysis_40k/20.analysis_with_sub_matrices")
kdir <- file.path(staging, "kspan/scRNA_seq_melanoma/analysis_40k/20.analysis_with_sub_matrices")

sample <- "53.MM057_DropSeq"
wd <- file.path(kdir, sample, "30.SCENIC/pySCENIC")
dir.create(wd, recursive = TRUE)
setwd(wd)

#<[[MM40kpySCENIC]]
# [1] run pyscenic on old GRNboost2 table
# [A] make input loom file {
# load expression matrix & remove doublets
load(file.path(zdir, sample, "00.RData/log_CPM_matrix.RData"))
log_CPM <- log_CPM[, meta[, cell]]

# make loom file (SCopeLoomR v0.5.0!)
build_loom(file.name = "logCPM.loom"
		, title = paste0(sample, "logCPM")
		, genome = "hg19"
		, dgem = log_CPM)
	
# satisfy the loompy constraints
loom <- open_loom(file.path = "logCPM.loom")
loom$link_delete(name = "col_attrs/CellID")
loom$link_delete(name = "row_attrs/Gene")
cell.id <- t(x = as.matrix(x = colnames(x = log_CPM)))
gene.id <- t(x = as.matrix(x = row.names(x = log_CPM)))
loom$create_dataset(name = "col_attrs/CellID", 
	robj = as.character(x = cell.id), dtype = guess_dtype(x = cell.id, string_len = "estimate"))
loom$create_dataset(name = "row_attrs/Gene",
	robj = as.character(x = gene.id), dtype = guess_dtype(x = gene.id, string_len = "estimate"))
finalize(loom = loom)


# calculate auc threshold
countByCell <- colSums(log_CPM> 0, na.rm=TRUE)
ret <- c(min=min(countByCell), quantile(countByCell, c(.01,.05, .10, .50, 1)))
    #   min      1%      5%     10%     50%    100% 
    #874.00  955.77 1053.00 1178.70 2063.50 6024.00 
#ret["1%"] / nrow(log_CPM) = 0.1317395
#-> set threshold to 0.1317395
#}

# [B] run pyscenic {
######################
#in bash
######################
sample=53.MM057_DropSeq
kdir=${staging}kspan/scRNA_seq_melanoma/analysis_40k/20.analysis_with_sub_matrices/${sample}
zdir=${staging}zkalender/scRNA_seq_melanoma/analysis_40k/20.analysis_with_sub_matrices/${sample}

wdir=${kdir}/30.SCENIC/pySCENIC
cd $wdir

# prepare grnboost2 link list with correct header
grnbfile=${kdir}/10.TextData/grnboost2.tsv
cp ${grnbfile} ./
sed -i "1iTF\ttarget\timportance" grnboost2.tsv
grnbfile=grnboost2.tsv
loomfile=logCPM.loom

## run on gene-based databases 
##############################
feather_dir=/ddn1/vol1/staging/leuven/res_00001/databases/cistarget/databases/homo_sapiens/hg19/refseq_r45/mc9nr/gene_based
dbs=$(ls ${feather_dir}/hg19*.feather | tr '\n' ' ')
annot_dir=/ddn1/vol1/staging/leuven/res_00001/databases/cistarget/motif2tf
annot_file=motifs-v9-nr.hgnc-m0.001-o0.0.tbl

#ctx step 
singularity exec --bind ${feather_dir}:${feather_dir}:ro,${annot_dir}:/annot_dir:ro ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic ctx ${grnbfile} ${dbs} --annotations_fname /annot_dir/${annot_file} --expression_mtx_fname ${loomfile} --output reg_mtf.csv --num_workers 20 --all_modules

#aucell step -> set threshold to 0.1317395
singularity exec ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic aucell ${loomfile} reg_mtf.csv --output pyscenic_output_mtf_1perc.loom --num_workers 20 --auc_threshold 0.1317395

## run on new track databases
#############################
feather_dir=/staging/leuven/res_00001/databases/cistarget/databases/homo_sapiens/hg19/refseq_r45/tc_v1/gene_based
dbs=$(ls ${feather_dir}/*ChIP_seq_transcription_factor.hg19-*.feather | tr '\n' ' ') 
#[[CtxSOX10tracks]]
annot_dir=/ddn1/vol1/staging/leuven/stg_00002/icistarget-data/annotations/homo_sapiens/hg19/track_annotations
annot_file=encode_20160128__inhouse_20200116__taipale_20130924__encode_project_20190621__ChIP-seq_transcription_factor.homo_sapiens.hg19.track_to_tf_in_motif_to_tf_format.tsv

#ctx step 
singularity exec --bind ${feather_dir}:${feather_dir}:ro,${annot_dir}:/annot_dir:ro ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic ctx ${grnbfile} ${dbs} --annotations_fname /annot_dir/${annot_file} --expression_mtx_fname ${loomfile} --output reg_trk.csv --num_workers 20 --all_modules

#aucell step -> set threshold to 0.1317395
singularity exec ${staging}kspan/progs/singularity_images/aertslab-pyscenic-0.9.18.sif pyscenic aucell ${loomfile} reg_trk.csv --output pyscenic_output_trk_1perc.loom --num_workers 20 --auc_threshold 0.1317395
}

# [2] make new loom file with results
#{
indir <- wd
wdloom <- file.path(staging, "kspan/scRNA_seq_melanoma/analysis_40k/MM40k100xSCENIC/MM40k100xSCENIC_woDoublets/MM40k100xSCENICloom")
setwd(wdloom)

# open two pyscenic loom files to get data {
lm <- H5File$new(file.path(indir, "pyscenic_output_mtf_1perc.loom"), mode = "r")
lt <- H5File$new(file.path(indir, "pyscenic_output_trk_1perc.loom"), mode = "r")

regulons <- list(
	mtf = lm[["row_attrs"]][["Regulons"]][],
	trk = lt[["row_attrs"]][["Regulons"]][]
)
auc <- list(
	mtf = lm[["col_attrs"]][["RegulonsAUC"]][],
	trk = lt[["col_attrs"]][["RegulonsAUC"]][]
)
cells <- lm[["col_attrs/CellID"]][]
genes <- lm[["row_attrs/Gene"]][]

lm$close_all()
lt$close_all()

# get raw counts
dgem <- read.table(file.path(zdir, sample, "10.TextData/raw_counts.tsv"))
dgem <- dgem[genes, cells]
#}

# change regulon names & keep only positive ones {
nontfs <- read.table(file.path(staging, "kspan/resources/hg19/hg19_nonTFs.lst"), header = F)$V1
regulons <- sapply(regulons, function(regmtx) {
	regmtx <- regmtx[, grepl("\\(\\+\\)", colnames(regmtx))]
	colnames(regmtx) <- gsub("\\(\\+\\)", "", colnames(regmtx))
	regmtx <- regmtx[, !colnames(regmtx) %in% nontfs]
	rownames(regmtx) <- genes
	regmtx
}, simplify = FALSE, USE.NAMES = TRUE)
colnames(regulons[["mtf"]]) <- paste0(colnames(regulons[["mtf"]]), "_motif_regulon")
colnames(regulons[["trk"]]) <- paste0(colnames(regulons[["trk"]]), "_track_regulon")

auc <- sapply(auc, function(regmtx) {
	regmtx <- regmtx[, grepl("\\(\\+\\)", colnames(regmtx))]
	colnames(regmtx) <- gsub("\\(\\+\\)", "", colnames(regmtx))
	regmtx <- regmtx[, !colnames(regmtx) %in% nontfs]
	rownames(regmtx) <- cells
	regmtx
}, simplify = FALSE, USE.NAMES = TRUE)
colnames(auc[["mtf"]]) <- paste0(colnames(auc[["mtf"]]), "_motif_regulon")
colnames(auc[["trk"]]) <- paste0(colnames(auc[["trk"]]), "_track_regulon")
#}

# remove small regulons (smaller than 10 genes) {
regulons <- sapply(regulons, function(regmtx) {
	keep <- colSums(regmtx) >= 10
	print(table(keep))

	regmtx[, keep]
}, simplify = FALSE, USE.NAMES = TRUE)
#NOTE: SOX10 motif regulon contains 7 genes only -> removed
#SOX6 motif regulon: 5 genes

auc[["mtf"]] <- auc[["mtf"]][, colnames(regulons[["mtf"]])]
auc[["trk"]] <- auc[["trk"]][, colnames(regulons[["trk"]])]
#}

# calculate regulon thresholds {
thresholds <- sapply(auc, function(a) {
	a <- new("aucellResults",
		SummarizedExperiment::SummarizedExperiment(assays=list(AUC=as.matrix(t(a)))))
	AUCell_exploreThresholds(a, plotHist = FALSE, assignCells = TRUE)
}, simplify = FALSE, USE.NAMES = TRUE)
thresholds <- c(thresholds[[1]], thresholds[[2]])
saveRDS(thresholds, file = paste0("aucellthresholds_", sample, ".rds.gz"), compress = "gzip")
#}

# get top motif per tf for motif regulons {
regtbl <- fread(file.path(indir, "reg_mtf.csv"), skip = 3, sep = ",")
colnames(regtbl) <- c("TF", "motifData", "AUC", "Annotation", "Context", "MotifSimilarityQvalue",
	"NES", "OrthologousIdentity", "RankAtMax", "TargetGenes")
regtbl <- regtbl[Context %like% "activating"]
regtbl <- regtbl[regtbl[, .I[NES == max(NES)], by = TF]$V1][, .(TF, motifData)]

regtbl[, motifData := paste0(motifData, ".png")]
regtbl[, regulon := paste0(TF, "_motif_regulon")]
regtbl_tracks <- data.table(regulon = colnames(regulons[["trk"]]))
regtbl_tracks[, TF := tstrsplit(regulon, "_", fixed = TRUE)[1]]
regtbl_tracks[, motifData := "no_image"]
setcolorder(regtbl_tracks, colnames(regtbl))
regtbl <- rbind(regtbl, regtbl_tracks)
#}

# make loom file with SCopeLoomR v0.6.4 {
# get embeddings {
embcoords <- list()
embfiles <- setNames(
	c("seurat_tsne1_tsne2", "seurat_pc1_pc2", "seurat_dc1_dc2",
		"seurat_umap1_umap2"),
	c("Expression tSNE", "PCA", "Diffusion Map", "Expression UMAP"))

for (embedding in names(embfiles)) {
	embfile <- file.path(zdir, sample, "10.TextData", paste0(embfiles[[embedding]], ".tsv"))
	
	if (file.exists(embfile)) {
		coords <- read.table(embfile, sep = "\t")
		coords <- coords[cells,]
		embcoords[[embedding]] <- coords
	}
}
#}

loomfile <- "MM057_SOX10-KD_Drop-seq.loom"
build_loom(
	file.name = loomfile,
	dgem = as.matrix(dgem),
	title = "MM057 DropSeq SOX10 knock-down",
	genome = "human",
	default.embedding = embcoords[[1]],
	default.embedding.name = names(embcoords)[1]
)
loom <- open_loom(loomfile)

# cell annotations & metrics (nUMI & nGene already present)
add_col_attr(loom = loom, key = "cell_line", value = meta[, Cell_Line], as.annotation = T)
add_col_attr(loom = loom, key = "experiment", value = meta[, Experiment], as.annotation = T)
add_col_attr(loom = loom, key = "cell_line_experiment", value = meta[, CE_ID], as.annotation = T)
add_col_attr(loom = loom, key = "percent.mito", value = meta[, percent.mito], as.metric = T)

# embeddings
for (i in 2:length(embcoords)) {
	add_embedding(loom = loom, embedding = embcoords[[i]], name = names(embcoords)[i])
}

# regulons
add_col_attr(loom = loom, key = "MotifRegulonsAUC", value = as.data.frame(x = auc[["mtf"]]))
add_col_attr(loom = loom, key = "TrackRegulonsAUC", value = as.data.frame(x = auc[["trk"]]))

add_row_attr(loom = loom, key = "MotifRegulons", value = as.data.frame(x = regulons[["mtf"]]))
add_row_attr(loom = loom, key = "TrackRegulons", value = as.data.frame(x = regulons[["trk"]]))

regtbl <- fread(file.path(indir, "reg_mtf.csv"), skip = 3, sep = ",")
colnames(regtbl) <- c("highlightedTFs", "motif", "AUC", "Annotation", "Context", "MotifSimilarityQvalue",
	"NES", "OrthologousIdentity", "RankAtMax", "TargetGenes")
regtbl <- regtbl[Context %like% "activating"]
regtbl[, highlightedTFs := paste0(highlightedTFs, "_motif_regulon")]	#needed to match reg name
regtbl <- regtbl[, .(highlightedTFs, motif, NES)]
regtbl_tracks <- data.table(highlightedTFs = colnames(regulons[["trk"]]))
regtbl_tracks[, motif := "no_image"]
regtbl_tracks[, NES := 0]
setcolorder(regtbl_tracks, colnames(regtbl))
regtbl <- rbind(regtbl, regtbl_tracks)

SCopeLoomR:::add_global_md_regulon_thresholds(loom = loom
	, regulon.threshold.assignments = thresholds
	, regulon.enrichment.table = regtbl
)

flush(loom)
loom$close_all()
#}
#}

sessionInfo() #{
#R version 3.6.1 (2019-07-05)
#Platform: x86_64-pc-linux-gnu (64-bit)
#Running under: CentOS Linux 7 (Core)
#
#Matrix products: default
#BLAS/LAPACK: /vsc-hard-mounts/leuven-apps/skylake/2018a/software/OpenBLAS/0.2.20-GCC-6.4.0-2.28/lib/libopenblas_haswellp-r0.2.20.so
#
#locale:
#[1] C
#
#attached base packages:
#[1] stats     graphics  grDevices utils     datasets  methods   base
#
#other attached packages:
#[1] AUCell_1.6.1      SCopeLoomR_0.6.4  rjson_0.2.20      hdf5r_1.2.0
#[5] data.table_1.12.8
#
#loaded via a namespace (and not attached):
# [1] mixtools_1.1.0              SummarizedExperiment_1.14.1
# [3] splines_3.6.1               lattice_0.20-38
# [5] vctrs_0.2.0                 htmltools_0.3.6
# [7] stats4_3.6.1                base64enc_0.1-3
# [9] survival_2.44-1.1           blob_1.2.0
#[11] XML_3.99-0.3                rlang_0.4.0
#[13] R.oo_1.22.0                 pillar_1.4.2
#[15] later_0.8.0                 DBI_1.0.0
#[17] R.utils_2.9.0               BiocParallel_1.18.1
#[19] segmented_1.0-0             BiocGenerics_0.30.0
#[21] bit64_0.9-7                 matrixStats_0.55.0
#[23] GenomeInfoDbData_1.2.1      zlibbioc_1.30.0
#[25] R.methodsS3_1.7.1           memoise_1.1.0
#[27] Biobase_2.44.0              IRanges_2.18.3
#[29] httpuv_1.5.2                GenomeInfoDb_1.20.0
#[31] parallel_3.6.1              AnnotationDbi_1.46.1
#[33] GSEABase_1.46.0             Rcpp_1.0.3
#[35] xtable_1.8-4                backports_1.1.5
#[37] promises_1.0.1              DelayedArray_0.10.0
#[39] S4Vectors_0.22.1            graph_1.62.0
#[41] annotate_1.62.0             XVector_0.24.0
#[43] mime_0.7                    bit_1.1-15.2
#[45] digest_0.6.21               shiny_1.3.2
#[47] GenomicRanges_1.36.1        grid_3.6.1
#[49] bitops_1.0-6                tools_3.6.1
#[51] magrittr_1.5                RCurl_1.95-4.12
#[53] tibble_2.1.3                RSQLite_2.1.2
#[55] crayon_1.3.4                pkgconfig_2.0.3
#[57] zeallot_0.1.0               MASS_7.3-51.4
#[59] Matrix_1.2-17               R6_2.4.1
#[61] compiler_3.6.1
#}
